import UIKit






func hex(_ hex:String) -> UIColor {
    var cs = hex.trimmingCharacters(in: .whitespacesAndNewlines).uppercased()
    
    if cs.hasPrefix("#"){
        cs.remove(at: cs.startIndex)
    }
    
    if cs.count != 6 {
        return UIColor.black
    }
    
    var rgbv: UInt32 = 0
    Scanner(string: cs).scanHexInt32(&rgbv)
    
    return UIColor(red: CGFloat((rgbv & 0xFF0000) >> 16) / 255.0,
                   green: CGFloat((rgbv & 0x00FF00) >> 8) / 255.0,
                   blue: CGFloat((rgbv & 0x0000FF)) / 255.0,
                   alpha: CGFloat(1.0))
}


extension UIStackView {
    func add(views: [UIView]){
        views.forEach {self.addArrangedSubview($0)}
    }
}


extension UIView {
    func setGrad(start: UIColor, end: UIColor){
        let layer = CAGradientLayer()
        layer.colors = [start.cgColor, end.cgColor]
        layer.startPoint = CGPoint(x: 0.5, y: 1.0)
        layer.endPoint = CGPoint(x: 0.5, y: 0.0)
        layer.frame = self.bounds
        layer.locations = [0, 1]
        self.layer.insertSublayer(layer, at: 0)
    }
}



class TransformedVM {
    var img: UIImage
    
    init(img: UIImage) {
        self.img = img
    }
    
    func getImage(distance: String, time: String, efpace: String, g1: String?, g2: String?) -> UIImage {
        var ret: UIImage? = nil
        
        let frame = CGRect(x: 0, y: 0, width: 1200, height: 600)
        let label = UILabel()
        label.textAlignment = .center
        label.font = UIFont.systemFont(ofSize: 60, weight: UIFont.Weight.heavy)
        label.textColor = .white
        label.text = distance
        
        
        let timel = UILabel(/*frame: CGRect(x: 0, y: 1200, width: 1200, height: 950)*/)
        timel.textAlignment = .center // y 1200
        timel.font = UIFont.boldSystemFont(ofSize: 60)
        timel.textColor = .white
        timel.text = time
        
        
        let pacel = UILabel(/*frame: CGRect(x: 0, y: 1200, width: 1200, height: 1100)*/)
        pacel.textAlignment = .center // y 1200
        pacel.font = UIFont.boldSystemFont(ofSize: 60)
        pacel.textColor = .white
        
        if efpace.count > 0 {
            pacel.text = "\(efpace)/km"
        } else {
            pacel.text = "--- km"
        }
        
        
       
        
        
        
        
       
        
        
        // w 1100
        let subtitle = UILabel(frame: CGRect(x: 0, y: 550, width: 1020, height: 200))
        subtitle.font = UIFont.boldSystemFont(ofSize: 70)
        subtitle.textAlignment = .right
        subtitle.textColor = .white
        subtitle.text = "Runny"
        
        let imv = UIImageView(frame: CGRect(x: 0, y: 0, width: 1200, height: 800))
        imv.contentMode = .scaleAspectFill
        imv.image = self.img
        
        
        let gradview = UIView(frame: CGRect(x: 0, y: 0, width: 1200, height: 800))
        if g1 != nil && g2 != nil {
            gradview.setGrad(start: hex(g1!), end: hex(g2!))
            gradview.alpha = 0.7
            // gradview.frame = CGRect(x: 0, y: 0, width: 1200, height: 800)
        }
        
        
        let st = UIStackView()
        st.frame = CGRect(x: 0, y: 800, width: 1200, height: 800) // x: 0
        st.distribution = .fillEqually // fillEqually
        st.alignment = .center
       // st.spacing = 20.0
        st.add(views: [label, timel, pacel])
        
        
      /*  let u = UIStackView(frame: CGRect(x: 0, y: 0, width: 1000, height: 300))
        u.alignment = .center
        u.addArrangedSubview(st)
        */
        
        let back = UIView()
        back.alpha = 0.6
        back.frame = CGRect(x: 0, y: 0, width: 900, height: 300)
        back.backgroundColor = .orange
        
        
        
        UIGraphicsBeginImageContext(frame.size)
        
        
        
        if let ctx = UIGraphicsGetCurrentContext() {
            
            if g1 != nil && g2 != nil {
                [imv, gradview, label, subtitle, timel, pacel].forEach { $0.layer.render(in: ctx) }
            } else {
                [/*imv, label, subtitle, timel, pacel*/ imv, back, subtitle, st].forEach { $0.layer.render(in: ctx) }
            }
            
            
            
            // st
            
            let res = UIGraphicsGetImageFromCurrentImageContext()
            ret = res!
        }
        
        return ret!
    }
}

let t = TransformedVM(img: UIImage(named: "wave.jpg")!)
t.getImage(distance: "12.3 km", time: "23:00", efpace: "3:21", g1: nil, g2: nil)







